// Generated by Selenium IDE
package webserver.tests.selenium;

import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import webserver.server.WebServer;

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class TestSitetSuiteTest {
	private static final int PORT = 10077;
	private static final String WEB_ROOT = "./htdocs/";
	private static final String MAINTENANCE_ROT = "./htdocs/";
	private WebServer webServer;
	private Thread webServerThread;

	private WebDriver driver;
	private Map<String, Object> vars;
	JavascriptExecutor js;
	@Before
	public void setUp() {
		System.setProperty("webdriver.gecko.driver", "d:\\freeware\\programming\\java-testing\\geckodriver\\geckodriver.exe");
		
		driver = new FirefoxDriver();
		js = (JavascriptExecutor) driver;
		vars = new HashMap<String, Object>();

		webServer = new WebServer();

		webServer.setPort(PORT);
		webServer.setWebRoot(WEB_ROOT);
		webServer.setMaintenanceRoot(MAINTENANCE_ROT);

		webServerThread = new Thread(){
			public void run(){								
				System.out.println("Thread Running");							

				webServer.startServer();
			}
		};
		webServerThread.start();
	}
	@After
	public void tearDown() throws Exception {
		driver.quit();

		webServer.stopServer();
		webServerThread.join();
	}
	@Test(timeout=60000)
	public void testSiteUp() {
		// Test name: TestSiteUp
		// Step # | name | target | value
		// 1 | open | http://localhost:10008/a.html | 
		driver.get("http://localhost:10008/a.html");
		// 2 | setWindowSize | 873x1074 | 
		driver.manage().window().setSize(new Dimension(873, 1074));
		// 3 | assertTitle | Welcome! | 
		assertThat(driver.getTitle(), is("Welcome!"));
	}
	@Test(timeout=60000)
	public void testSiteExternalLinksOK() {
		// Test name: TestSiteExternalLinksOK
		// Step # | name | target | value
		// 1 | open | http://localhost:10008/a.html | 
		driver.get("http://localhost:10008/a.html");
		// 2 | setWindowSize | 873x1074 | 
		driver.manage().window().setSize(new Dimension(873, 1074));
		// 3 | click | linkText=do external links work? | 
		driver.findElement(By.linkText("do external links work?")).click();
		// 4 | assertTitle | Google | 
		assertThat(driver.getTitle(), is("Google"));
	}
	@Test(timeout=60000)
	public void testSiteGeneralAbsoluteLinksOK() {
		// Test name: TestSiteGeneralAbsoluteLinksOK
		// Step # | name | target | value
		// 1 | open | http://localhost:10008/a.html | 
		driver.get("http://localhost:10008/a.html");
		// 2 | click | linkText=do general absolute links work | 
		driver.findElement(By.linkText("do general absolute links work")).click();
		// 3 | assertText | css=html | back
		assertThat(driver.findElement(By.cssSelector("html")).getText(), is("back"));
		// 4 | assertTitle | c | 
		assertThat(driver.getTitle(), is("c"));
	}
	@Test(timeout=60000)
	public void testSiteGeneralRelativeLinksOK() {
		// Test name: TestSiteGeneralRelativeLinksOK
		// Step # | name | target | value
		// 1 | open | http://localhost:10008/a.html | 
		driver.get("http://localhost:10008/a.html");
		// 2 | setWindowSize | 873x1074 | 
		driver.manage().window().setSize(new Dimension(873, 1074));
		// 3 | click | linkText=do general relative links work | 
		driver.findElement(By.linkText("do general relative links work")).click();
		// 4 | assertTitle | b | 
		assertThat(driver.getTitle(), is("b"));
		// 5 | assertText | css=html | back
		assertThat(driver.findElement(By.cssSelector("html")).getText(), is("back"));
	}
	@Test(timeout=60000)
	public void testSiteImagesOK() {
		// Test name: TestSiteImagesOK
		// Step # | name | target | value
		// 1 | open | http://localhost:10008/a.html | 
		driver.get("http://localhost:10008/a.html");
		// 2 | setWindowSize | 873x1074 | 
		driver.manage().window().setSize(new Dimension(873, 1074));
		// 3 | waitForElementVisible | css=tr:nth-child(1) img | 5000
		{
			WebDriverWait wait = new WebDriverWait(driver, 5);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("tr:nth-child(1) img")));
		}
		// 4 | assertElementPresent | css=tr:nth-child(1) img | 
		{
			List<WebElement> elements = driver.findElements(By.cssSelector("tr:nth-child(1) img"));
			assert(elements.size() > 0);
		}
		// 5 | waitForElementVisible | css=tr:nth-child(2) img | 5000
		{
			WebDriverWait wait = new WebDriverWait(driver, 5);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("tr:nth-child(2) img")));
		}
		// 6 | assertElementPresent | css=tr:nth-child(2) img | 
		{
			List<WebElement> elements = driver.findElements(By.cssSelector("tr:nth-child(2) img"));
			assert(elements.size() > 0);
		}
		// 7 | waitForElementVisible | css=tr:nth-child(3) img | 5000
		{
			WebDriverWait wait = new WebDriverWait(driver, 5);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("tr:nth-child(3) img")));
		}
		// 8 | assertElementPresent | css=tr:nth-child(3) img | 
		{
			List<WebElement> elements = driver.findElements(By.cssSelector("tr:nth-child(3) img"));
			assert(elements.size() > 0);
		}
		// 9 | waitForElementVisible | css=tr:nth-child(4) img | 5000
		{
			WebDriverWait wait = new WebDriverWait(driver, 5);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("tr:nth-child(4) img")));
		}
		// 10 | assertElementPresent | css=tr:nth-child(4) img | 
		{
			List<WebElement> elements = driver.findElements(By.cssSelector("tr:nth-child(4) img"));
			assert(elements.size() > 0);
		}
		// 11 | waitForElementVisible | css=tr:nth-child(5) img | 5000
		{
			WebDriverWait wait = new WebDriverWait(driver, 5);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("tr:nth-child(5) img")));
		}
		// 12 | assertElementPresent | css=tr:nth-child(5) img | 
		{
			List<WebElement> elements = driver.findElements(By.cssSelector("tr:nth-child(5) img"));
			assert(elements.size() > 0);
		}
		// 13 | waitForElementVisible | css=tr:nth-child(6) img | 5000
		{
			WebDriverWait wait = new WebDriverWait(driver, 5);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("tr:nth-child(6) img")));
		}
		// 14 | assertElementPresent | css=tr:nth-child(6) img | 
		{
			List<WebElement> elements = driver.findElements(By.cssSelector("tr:nth-child(6) img"));
			assert(elements.size() > 0);
		}
		// 15 | waitForElementVisible | css=tr:nth-child(7) img | 5000
		{
			WebDriverWait wait = new WebDriverWait(driver, 5);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("tr:nth-child(7) img")));
		}
		// 16 | assertElementPresent | css=tr:nth-child(7) img | 
		{
			List<WebElement> elements = driver.findElements(By.cssSelector("tr:nth-child(7) img"));
			assert(elements.size() > 0);
		}
	}
	@Test(timeout=60000)
	public void testSiteLinksOK() {
		// Test name: TestSiteLinksOK
		// Step # | name | target | value
		// 1 | open | http://localhost:10008/a.html | 
		driver.get("http://localhost:10008/a.html");
		// 2 | setWindowSize | 873x1074 | 
		driver.manage().window().setSize(new Dimension(873, 1074));
		// 3 | assertElementPresent | linkText=do external links work? | 
		{
			List<WebElement> elements = driver.findElements(By.linkText("do external links work?"));
			assert(elements.size() > 0);
		}
		// 4 | assertElementPresent | linkText=do simple relative internal links work? | 
		{
			List<WebElement> elements = driver.findElements(By.linkText("do simple relative internal links work?"));
			assert(elements.size() > 0);
		}
		// 5 | assertElementPresent | linkText=do general relative links work | 
		{
			List<WebElement> elements = driver.findElements(By.linkText("do general relative links work"));
			assert(elements.size() > 0);
		}
		// 6 | assertElementPresent | linkText=do simple absolute links work | 
		{
			List<WebElement> elements = driver.findElements(By.linkText("do simple absolute links work"));
			assert(elements.size() > 0);
		}
		// 7 | assertElementPresent | linkText=do general absolute links work | 
		{
			List<WebElement> elements = driver.findElements(By.linkText("do general absolute links work"));
			assert(elements.size() > 0);
		}
		// 8 | assertElementPresent | linkText=do URLs with spaces work | 
		{
			List<WebElement> elements = driver.findElements(By.linkText("do URLs with spaces work"));
			assert(elements.size() > 0);
		}
		// 9 | assertElementPresent | linkText=do URLs with %20 work | 
		{
			List<WebElement> elements = driver.findElements(By.linkText("do URLs with %20 work"));
			assert(elements.size() > 0);
		}
		// 10 | assertElementPresent | linkText=do TXT files work | 
		{
			List<WebElement> elements = driver.findElements(By.linkText("do TXT files work"));
			assert(elements.size() > 0);
		}
	}
	@Test(timeout=60000)
	public void testSiteSimpleAbsoluteLinks() {
		// Test name: TestSiteSimpleAbsoluteLinks
		// Step # | name | target | value
		// 1 | open | http://localhost:10008/a.html | 
		driver.get("http://localhost:10008/a.html");
		// 2 | setWindowSize | 873x1074 | 
		driver.manage().window().setSize(new Dimension(873, 1074));
		// 3 | click | linkText=do simple absolute links work | 
		driver.findElement(By.linkText("do simple absolute links work")).click();
		// 4 | assertTitle | 404 - Page not found | 
		assertThat(driver.getTitle(), is("404 - Page not found"));
		// 5 | assertText | css=html | 404 - Page not found
		assertThat(driver.findElement(By.cssSelector("html")).getText(), is("404 - Page not found"));
	}
	@Test(timeout=60000)
	public void testSiteSimpleRelativeInternalLinksOK() {
		// Test name: TestSiteSimpleRelativeInternalLinksOK
		// Step # | name | target | value
		// 1 | open | http://localhost:10008/a.html | 
		driver.get("http://localhost:10008/a.html");
		// 2 | setWindowSize | 873x1074 | 
		driver.manage().window().setSize(new Dimension(873, 1074));
		// 3 | click | linkText=do simple relative internal links work? | 
		driver.findElement(By.linkText("do simple relative internal links work?")).click();
		// 4 | assertTitle | b | 
		assertThat(driver.getTitle(), is("b"));
		// 5 | assertText | css=html | back
		assertThat(driver.findElement(By.cssSelector("html")).getText(), is("back"));
	}
	@Test(timeout=60000)
	public void testSiteTxtOK() {
		// Test name: TestSiteTxtOK
		// Step # | name | target | value
		// 1 | open | http://localhost:10008/a.html | 
		driver.get("http://localhost:10008/a.html");
		// 2 | setWindowSize | 873x1074 | 
		driver.manage().window().setSize(new Dimension(873, 1074));
		// 3 | click | linkText=do TXT files work | 
		driver.findElement(By.linkText("do TXT files work")).click();
		// 4 | assertText | css=html | Hello TXT works
		assertThat(driver.findElement(By.cssSelector("html")).getText(), is("Hello TXT works"));
	}
	@Test(timeout=60000)
	public void testSiteURL20OK() {
		// Test name: TestSiteURL20OK
		// Step # | name | target | value
		// 1 | open | http://localhost:10008/a.html | 
		driver.get("http://localhost:10008/a.html");
		// 2 | setWindowSize | 873x1074 | 
		driver.manage().window().setSize(new Dimension(873, 1074));
		// 3 | click | linkText=do URLs with %20 work | 
		driver.findElement(By.linkText("do URLs with %20 work")).click();
		// 4 | assertTitle | a b | 
		assertThat(driver.getTitle(), is("a b"));
		// 5 | assertText | css=html | back
		assertThat(driver.findElement(By.cssSelector("html")).getText(), is("back"));
	}
	@Test(timeout=60000)
	public void testSiteURLSpacesOK() {
		// Test name: TestSiteURLSpacesOK
		// Step # | name | target | value
		// 1 | open | http://localhost:10008/a.html | 
		driver.get("http://localhost:10008/a.html");
		// 2 | setWindowSize | 873x1074 | 
		driver.manage().window().setSize(new Dimension(873, 1074));
		// 3 | click | linkText=do URLs with spaces work | 
		driver.findElement(By.linkText("do URLs with spaces work")).click();
		// 4 | assertTitle | a b | 
		assertThat(driver.getTitle(), is("a b"));
		// 5 | assertText | css=html | back
		assertThat(driver.findElement(By.cssSelector("html")).getText(), is("back"));
	}
}
